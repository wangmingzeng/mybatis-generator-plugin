package com.mybatis.generator.plugin;

import static org.mybatis.generator.internal.util.StringUtility.isTrue;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.util.StringUtility;

public class MyCommentGenerator implements CommentGenerator{
	
	 /** 配置属性 */
    private Properties properties;
    
    /** 日期 */
    private boolean suppressDate;
    
    /** 注解 */
    private boolean suppressAllComments;

    /** 表的注释.
     * If suppressAllComments is true, this option is ignored*/
    private boolean addRemarkComments;
    
    private SimpleDateFormat dateFormat;

    public MyCommentGenerator() {
        super();
        properties = new Properties();
        suppressDate = false;
        suppressAllComments = false;
        addRemarkComments = false;
    }
    
	@Override
	public void addConfigurationProperties(Properties properties) {
		 this.properties.putAll(properties);
		 suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));
		 suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
		 addRemarkComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));
		 String dateFormatString = properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_DATE_FORMAT);
		 if (StringUtility.stringHasValue(dateFormatString)) {
			 dateFormat = new SimpleDateFormat(dateFormatString);
		 }
	}

	/**
	 * 给字段添加注释信息
	 * @introspectedColumn	包含了字段的完整信息，通过getRemarks方法可以获取字段的注释信息
	 */
	@Override
	public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}
		String remarks = introspectedColumn.getRemarks();
		field.addJavaDocLine("/**");
		if (StringUtility.stringHasValue(remarks)) {
			field.addJavaDocLine(" * " + introspectedColumn.getRemarks());
		}
		// 生成@mbg.generated注释
		addJavadocTag(field, false);
		field.addJavaDocLine(" */");
	}

	@Override
	public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
            return;
        }
		field.addJavaDocLine("/**");
		String remarks = introspectedTable.getRemarks();
		if (StringUtility.stringHasValue(remarks)) {
			field.addJavaDocLine(" * " + introspectedTable.getRemarks());
		}
        // 生成@mbg.generated注释
        addJavadocTag(field, false);
        field.addJavaDocLine(" */");
	}

	@Override
	public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
		if (suppressAllComments || !addRemarkComments) {
			return;
		}
		topLevelClass.addJavaDocLine("/**");
		String remarks = introspectedTable.getRemarks();
		if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
			topLevelClass.addJavaDocLine(" * Database Table Remarks:");
			String[] remarkLines = remarks.split(System.getProperty("line.separator"));
			for (String remarkLine : remarkLines) {
				topLevelClass.addJavaDocLine(" *   " + remarkLine); 
			}
		}
		topLevelClass.addJavaDocLine(" *"); 
		topLevelClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
		topLevelClass.addJavaDocLine(" * " + introspectedTable.getRemarks());
		addJavadocTag(topLevelClass, false);
		topLevelClass.addJavaDocLine(" */");
	}

	@Override
	public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}
		innerClass.addJavaDocLine("/**");
		innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
		addJavadocTag(innerClass, false);
		innerClass.addJavaDocLine(" */");
	}

	@Override
	public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
		if (suppressAllComments) {
			return;
		}
		innerClass.addJavaDocLine("/**");
		innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator.");
		addJavadocTag(innerClass, false);
		innerClass.addJavaDocLine(" */");
	}

	@Override
	public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
		if (suppressAllComments) {
			return;
		}
		innerEnum.addJavaDocLine("/**");
		innerEnum.addJavaDocLine(" * This enum was generated by MyBatis Generator.");
		addJavadocTag(innerEnum, false);
		innerEnum.addJavaDocLine(" */");
	}

	@Override
	public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}
		method.addJavaDocLine("/**");
        StringBuilder sb = new StringBuilder();
        sb.append(" * @return ");
        sb.append(introspectedColumn.getActualColumnName());
        sb.append(" ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString().replace("\n", " "));
        method.addJavaDocLine(" */");
	}

	@Override
	public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
		if (suppressAllComments) {
			return;
		}
		method.addJavaDocLine("/**");
        StringBuilder sb = new StringBuilder();
        Parameter parm = method.getParameters().get(0);
        sb.append(" * @param ");
        sb.append(parm.getName());
        sb.append(" ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString().replace("\n", " "));
        method.addJavaDocLine(" */");
		
	}

	@Override
	public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
		// add no document level comments by default
		return;
	}

	@Override
	public void addJavaFileComment(CompilationUnit compilationUnit) {
		// add no document level comments by default
		return;
	}

	@Override
	public void addComment(XmlElement xmlElement) {
		return;
//		if (suppressAllComments) {
//            return;
//        }
//		xmlElement.addElement(new TextElement("<!--"));
//		StringBuilder sb = new StringBuilder();
//		sb.append("  WARNING - ");
//		sb.append(MergeConstants.NEW_ELEMENT_TAG);
//		xmlElement.addElement(new TextElement(sb.toString()));
//		xmlElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify.")); //$NON-NLS-1$
//		String s = getDateString();
//		if (s != null) {
//			sb.setLength(0);
//			sb.append("  This element was generated on ");
//			sb.append(s);
//			sb.append('.');
//			xmlElement.addElement(new TextElement(sb.toString()));
//		}
//		xmlElement.addElement(new TextElement("-->"));
	}

	@Override
	public void addRootComment(XmlElement rootElement) {
		// add no document level comments by default
		return;
	}

	protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
		javaElement.addJavaDocLine(" *");
		StringBuilder sb = new StringBuilder();
		sb.append(" * ");
		sb.append(MergeConstants.NEW_ELEMENT_TAG);
		if (markAsDoNotDelete) {
			sb.append(" do_not_delete_during_merge");
		}
		String s = getDateString();
		if (s != null) {
			sb.append(' ');
			sb.append(s);
		}
		javaElement.addJavaDocLine(sb.toString());
	}

	protected String getDateString() {
		if (suppressDate) {
			return null;
		} else if (dateFormat != null) {
			return dateFormat.format(new Date());
		} else {
			return new Date().toString();
		}
	}
}
